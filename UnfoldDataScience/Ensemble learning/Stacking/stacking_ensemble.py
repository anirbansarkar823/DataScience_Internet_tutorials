# -*- coding: utf-8 -*-
"""stacking_ensemble.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nZzWVN3XFjEka7miUIbW7ZNT979AoFPx
"""

# Importig needed packages
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import LinearSVC
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn import model_selection
# from sklearn.ensemble import StackingClassifier -- we can use this one too
from mlxtend.classifier import StackingClassifier

"""# Stack of estimators with a final classifier.

# Stacked generalization consists in stacking the output of individual estimator and use a classifier to compute the final prediction. Stacking allows to use the strength of each individual estimator by using their output as input of a final estimator.

# Note that estimators_ are fitted on the full X while final_estimator_ is trained using cross-validated predictions of the base estimators using cross_val_predict.
"""

iris.data.shape

#Creating the dataset

from sklearn import datasets

iris = datasets.load_iris()
X_train, y_train = iris.data[:, 1:3], iris.target # taking entire dataset for training, only two columns

# First defining the base learners
myclf1 = KNeighborsClassifier(n_neighbors=1)
myclf2 = RandomForestClassifier(random_state=1)
myclf3 = GaussianNB()

# meta model
meta_model = LogisticRegression()

# Creating stacking classifier with above models
stacking_clf = StackingClassifier(classifiers=[myclf1, myclf2, myclf3], meta_classifier=meta_model)

# Running all the models
print("Doing 3-fold cross validation here:\n")

for iterclf, iterLabel in zip([myclf1, myclf2, myclf3, stacking_clf], 
                              ['K-Nearest Neighbours model', 'Random Forest Model', 'Naive Bayes Model', 'StackingClassifier model']):
  scores = model_selection.cross_val_score(iterclf, X_train, y_train, cv=50, scoring='accuracy')
  print(f"Accuracy: {scores.mean():{6}.{3}} {scores.std():{6}.{3}} {iterLabel}")