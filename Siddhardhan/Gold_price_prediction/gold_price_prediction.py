# -*- coding: utf-8 -*-
"""Gold_Price_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11R4EnvEW2rSKGtE9GPJ-cTsOw9bCltAQ
"""

from google.colab import drive
drive.mount('/content/drive')

# Importing the Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

# Loading the csv data
gold_data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/gld_price_data.csv')

gold_data.head()
# spx - a company traded
# gld - gold prices on particular dates
# usd - us dollar value
# slv - silver prices
# eur/use - european dollar price to us dollar price



# print first 5 rows in the dataframe
gold_data.head()

# print last 5 rows of the dataframe
gold_data.tail()

# number of rows and columns
gold_data.shape

# getting some basic informations about the data
gold_data.info()

# checking the number of missing values
gold_data.isnull().sum()

# getting the statistical measures of the data
gold_data.describe()

gold_data.describe(include=['O'])

"""Correlation:
1. Positive Correlation
2. Negative Correlation
"""

correlation = gold_data.corr()
correlation

type(correlation)

# constructing a heatmap to understand the correlatiom
plt.figure(figsize = (15,15))
sns.heatmap(correlation, cbar=True, square=True, fmt='.2f',annot=True, annot_kws={'size':8}, cmap='Blues')

# correlation values of GLD
print(correlation['GLD'])

# checking the distribution of the GLD Price
sns.distplot(gold_data['GLD'],color='green')

sns.histplot(gold_data['GLD'],color='green', kde=True)

sns.displot(gold_data['GLD'],color='green', kind='kde')

"""Splitting the Features and Target"""

X = gold_data.drop(['Date','GLD'],axis=1)
Y = gold_data['GLD']

print(X)

type(X)

print(Y)

"""Splitting into Training data and Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=2, stratify=None)

train_test_split?

"""Model Training:
Random Forest Regressor
"""

regressor = RandomForestRegressor()

RandomForestRegressor?

from sklearn.model_selection import GridSearchCV

parameters = {'n_estimators':[100, 50, 30, 150, 80, 150, 200], 'max_leaf_nodes': [5, 10, 15, 20, 30]}

regressor_cv = GridSearchCV(regressor, parameters) # cv=5 by default

regressor_cv.fit(X_train, Y_train)

regressor_cv.best_params_

regressor_cv.best_score_

regressor_best = RandomForestRegressor(max_leaf_nodes= 30, n_estimators=50)
regressor_best.fit(X_train, Y_train)

regressor_best.base_estimator_

feature_importance = pd.DataFrame(regressor_best.feature_importances_.T, index=X.columns)
feature_importance

"""Model Evaluation"""

# prediction on Test Data
test_data_prediction = regressor_best.predict(X_test)

print(test_data_prediction)

# R squared error
error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared error : ", error_score)

"""Compare the Actual Values and Predicted Values in a Plot"""

Y_test = list(Y_test)

plt.figure(figsize=(24,10))
plt.plot(Y_test, color='blue', label = 'Actual Value')
plt.plot(test_data_prediction, color='green', label='Predicted Value')
plt.title('Actual Price vs Predicted Price')
plt.xlabel('Number of values')
plt.ylabel('GLD Price')
plt.legend()
plt.show()

plt.figure(figsize=(24,10))
plt.scatter(Y_test, test_data_prediction)
plt.xlabel('Y test')
plt.ylabel('test prediction')

plt.figure(figsize=(18,10))
sns.regplot(Y_test, test_data_prediction)
plt.xlabel('Y test')
plt.ylabel('test prediction')

